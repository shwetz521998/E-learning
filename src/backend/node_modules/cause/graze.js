// Generated by CoffeeScript 1.9.1
(function() {
  var $, Graze, Q, Template, fn, func, jsdom, name, ref, request, traverse;

  jsdom = require('jsdom').jsdom;

  $ = require('jquery')(jsdom().parentWindow);

  request = require('request');

  Q = require('q');

  Graze = (function() {
    function Graze() {
      this.chain = [];
    }

    Graze.prototype.execute = function($el) {
      var call, i, len, ref;
      ref = this.chain;
      for (i = 0, len = ref.length; i < len; i++) {
        call = ref[i];
        $el = call.func.apply($el, call.args);
      }
      return $el;
    };

    return Graze;

  })();

  ref = $.fn;
  fn = function(name, func) {
    Graze.prototype[name] = function() {
      this.chain.push({
        func: func,
        args: arguments
      });
      return this;
    };
    return module.exports[name] = function() {
      var graze;
      graze = new Graze();
      graze[name].apply(graze, arguments);
      return graze;
    };
  };
  for (name in ref) {
    func = ref[name];
    fn(name, func);
  }

  traverse = function(template, $el) {
    var context, key, result, val;
    context = this;
    result = {};
    for (key in template) {
      val = template[key];
      if (val instanceof Graze) {
        result[key] = val.execute($el);
      } else if (val instanceof Array) {
        result[key] = [];
        $el.each(function(index) {
          return result[key].push(traverse.call(context, val[0], $(this)));
        });
      } else if (val instanceof Function) {
        result[key] = val.call(context, $el, $);
      } else if (typeof val === 'object') {
        $.extend(result, traverse.call(context, val, $el.find(key)));
      }
    }
    return result;
  };

  module.exports.nest = function(template) {
    return function($el) {
      return traverse(template, $el);
    };
  };

  Template = (function() {
    function Template(template1) {
      this.template = template1;
    }

    Template.prototype.scrape = function(options) {
      var deferred;
      if (typeof options === 'string') {
        options = {
          uri: options
        };
      }
      deferred = Q.defer();
      if (options.header == null) {
        options.header = {
          'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36'
        };
      }
      request(options, (function(_this) {
        return function(error, response, body) {
          if (error || response.statusCode !== 200) {
            return deferred.reject({
              error: error,
              response: response,
              body: body
            });
          }
          return deferred.resolve(_this.process(body, response));
        };
      })(this));
      return deferred.promise;
    };

    Template.prototype.process = function(html, context) {
      return traverse.call(context, this.template, $(html));
    };

    return Template;

  })();

  module.exports.template = function(template) {
    return new Template(template);
  };

  module.exports._patch_request = function(request_patch, func) {
    request = request_patch;
    func();
    return request = require('request');
  };

}).call(this);
